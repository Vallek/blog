<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-01-08T12:59:11+03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Борьба с дизайном</title><subtitle>Конструктивная критика дизайн-решений.</subtitle><entry><title type="html">Как изменить цвета подсветки синтаксиса в VS Code</title><link href="http://localhost:4000/2019/01/07/vs-code-syntax-highlight.html" rel="alternate" type="text/html" title="Как изменить цвета подсветки синтаксиса в VS Code" /><published>2019-01-07T00:00:00+03:00</published><updated>2019-01-07T00:00:00+03:00</updated><id>http://localhost:4000/2019/01/07/vs-code-syntax-highlight</id><content type="html" xml:base="http://localhost:4000/2019/01/07/vs-code-syntax-highlight.html">&lt;p&gt;Решить, вроде бы, банальный для редактора кода вопрос из заголовка, в VS Code оказалось непросто. В Sublime Text для этого достаточно распаковать файл темы, найти нужное значение и поменять цвет. Но мне нужен был официально бесплатный для коммерческого использования редактор и из тех, что я пробовал, VS Code показался самым нормальным (еще потыкал Brackets и Atom). Но, как это обычно бывает, чем дольше чем-то пользуешься, тем больше косяков находишь. Особенно у Майкрософт, да. Тут они решили не искать простых путей (по крайней мере, для пользователя). Хотите поменять один цвет? Вам придется либо создавать тему с нуля, либо собирать по крупицам рецепт ниже. Может этот пост сэкономит кому-то время и нервы.&lt;/p&gt;

&lt;p&gt;Будем менять цвета подсветки на примере темы Solarized Dark и CSS.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Открываем настройки.&lt;/li&gt;
  &lt;li&gt;В пользовательские настройки добавляем следующую конструкцию:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;“editor.tokenColorCustomizations”: {
    “[Solarized Dark]”: {
        “textMateRules”: [
            {
                “scope”: “entity.other.attribute-name.class.css”,
                “settings”: {
                “foreground”: “#e9a449”
                }
            },
        ],
    },
},
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;как-изменить-другую-тему-другие-параметры-и-другие-языки&quot;&gt;Как изменить другую тему, другие параметры и другие языки&lt;/h2&gt;

&lt;p&gt;Название темы в квадратных скобках просто заменяете на вашу. Вам нужно узнать значение scope для того элемента, который вы хотите изменить. Для этого откройте файл с кодом. Вызовите командную строку (Ctrl+Shift+P). Наберите Developer: Inspect TM Scopes и нажмите Enter. При клике на элемент, появится всплывающее окно:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/designblog/Images/BrK-p8PMBERKd8NTmD04oA.png&quot; alt=&quot;скриншот-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Оно сразу предлагает строку с называнием параметра (тот самый scope) и текущим цветом — entity.other.attribute-name { “foreground”: “#93A1A1” }. Но, это не то, что нам нужно! По-крайней мере в данном случае, этот параметр изменит цвет всех селекторов (и классов, и id). Но я хочу задать для каждого свой цвет. Поэтому нам нужен первый параметр из списка ниже. То есть entity.other.attribute-name.class.css. У идентификатора будет похожая картина, только scope будет entity.other.attribute-name.id.css.&lt;/p&gt;

&lt;p&gt;А вот после применения настроек scope также поменяется на нужный:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/designblog/Images/Gl2CS_N3358j5fO73nX9A.png&quot; alt=&quot;скриншот-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Я оставил в коде запятые на случай, если вы захотите добавить других цветов и другие параметры на уровни выше.&lt;/p&gt;</content><author><name></name></author><summary type="html">Решить, вроде бы, банальный для редактора кода вопрос из заголовка, в VS Code оказалось непросто. В Sublime Text для этого достаточно распаковать файл темы, найти нужное значение и поменять цвет. Но мне нужен был официально бесплатный для коммерческого использования редактор и из тех, что я пробовал, VS Code показался самым нормальным (еще потыкал Brackets и Atom). Но, как это обычно бывает, чем дольше чем-то пользуешься, тем больше косяков находишь. Особенно у Майкрософт, да. Тут они решили не искать простых путей (по крайней мере, для пользователя). Хотите поменять один цвет? Вам придется либо создавать тему с нуля, либо собирать по крупицам рецепт ниже. Может этот пост сэкономит кому-то время и нервы.</summary></entry><entry><title type="html">Изменения или жизнь</title><link href="http://localhost:4000/2019/01/07/izmenenia-ili-zhisn.html" rel="alternate" type="text/html" title="Изменения или жизнь" /><published>2019-01-07T00:00:00+03:00</published><updated>2019-01-07T00:00:00+03:00</updated><id>http://localhost:4000/2019/01/07/izmenenia-ili-zhisn</id><content type="html" xml:base="http://localhost:4000/2019/01/07/izmenenia-ili-zhisn.html">&lt;p&gt;Увидел очередную статью на тему &lt;a href=&quot;https://blog.asmartbear.com/change.html&quot;&gt;“Всегда лучше все менять”&lt;/a&gt;. Есть такой особый тип людей, которые считают, что любые изменения, обновления и прочие редизайны являются благом сами по себе. Таких людей довольно много в IT и около него, иначе как объяснить постоянные новые фичи, еженедельный цикл обновлений, отваливание “устаревших” технологий и восторги по любому поводу? Для таких людей вопрос “А зачем здесь что-то менять?” сам по себе является ересью. Многие из них готовы признать, что не все изменения к лучшему, но, мол, даже они несут пользу, опыт ошибок и вот это всё. Евангелисты постоянных реноваций упускают из виду только одну деталь — пользователей. Как насчет пользователей, вашей аудитории, тех людей, которые как бы используют ваш продукт, или даже его покупают (а то и простигосподи на него подписаны)? Как насчет их мнения, их удобства и их нужд?&lt;/p&gt;

&lt;p&gt;В статье по ссылке, как это обычно бывает, происходит мастерское жонглирование понятиями. Тут вам и “Вы должны измениться сами” и “Все недовольны тем, как сейчас, но не хотят изменений”. Первый аргумент может и применим к каким-то общественным сферам, но как я сука должен измениться, чтобы у меня снова заработали старые расширения на Firefox? Ну а про недовольство тем, как сейчас — классический ход с введением ложного утверждения и доказательством своей правоты от него. Кому не нравится? Почему? Эти вопросы (не говоря уже про ответы), да и вообще конкретику в таких статьях найти сложно.&lt;/p&gt;

&lt;p&gt;Другой популярный аргумент — просто нужно привыкнуть. Тут опять же происходит подмена понятий. Ведь привыкнуть можно почти к чему угодно (традиционный уже анекдот про еблю в жопу раз в неделю). Относительно легко привыкают к новому пользователи софта и всяких онлайн сервисов. Мы действительно уже привыкли привыкать. Удобный порядок постов в социальной сети превращен в кашу с помощью волшебного алгоритма, который знает как лучше? Привыкнем. Половина расширений браузера, без которых любое действие замедляется и становится неудобным, отвалилась после обновлений? Привыкнем. Способность человека привыкать — не аргумент в споре, так как она не имеет никакого отношения к конкретным продуктам и фичам, о которых идет речь.&lt;/p&gt;

&lt;p&gt;Выбор “Изменять или не изменять” — это ложный выбор. Обычно есть три варианта: сделать лучше, сделать хуже и ничего не изменять. При этом иногда можно сделать хуже, ничего не поменяв. Но тут опять же не стоит подменять понятия. Если вы понимаете, что бездействием что-то испортите, то это уже совсем другая история. Но давайте перейдем к конкретике.&lt;/p&gt;

&lt;p&gt;Вот моя любимая тема — браузеры. Браузер — сложная штука и поменять в ней можно много чего. Вряд ли кто-то будет возражать, что любой браузер должен поддерживать все последние стандарты. Нет причин не внедрять то, что отвечает за возможность отображать сайты. Хотя даже тут можно спросить, так ли нам нужна поддержка VR, AR и других букв, но разработкой стандартов занимаются не авторы браузеров (по-крайней мере одних из двух). Поэтому тут им остается только обновлять. То же самое относится к исправлению багов и проблем производительности.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/designblog/Images/NfCUmJ4E9uAm5kWhvKLrBA.png&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;Устаревшие расширения в устаревшем сайдбаре. И это еще новый профиль, раньше было больше. Но самое смешное на этом cкриншоте — новая фича от Мозиллы — Контейнеры, сделанная в виде старого расширения (но почему-то без плашки Legacy).&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Совсем другая история с расширениями. Firefox скоро полностью откажется от старых расширений, а с ними и от возможности изменять (ирония!) интерфейс и функциональность браузера. Новые web расширения — замечательная технология. Она позволит создавать одно расширение сразу на все платформы и с безопасностью у них вроде лучше. Вот только они не могут полностью заменить старую технологию. А даже если бы и могли, почти никто не будет переписывать свои расширения с нуля. Значит, это новшество пойдет во вред многим пользователям и прежде всего тем, кто выбирал Firefox осознанно за расширяемость. А ведь все, что требовалось — просто оставить старые расширения в покое. Можно было пойти и на более радикальные меры (но менее радикальные, чем полный отказ). Например, выключить их по умолчанию, вынести в какой-то модуль и так далее. Но нет, дорогу новшествам. Кому нужны ваши сайдбары, удобные вкладки и настраиваемый интерфейс.&lt;/p&gt;

&lt;p&gt;Возможно, у вас сложилось впечатление, что я против любых изменений. Разумеется это не так. Я всего лишь против крайностей. Дизайн — это способ выполнения задачи. И прежде чем что-то менять стоит спросить себя, насколько эффективно выполняется задача и как можно ее улучшить. Иногда ответ — “никак”. А иногда действительно необходимые изменения игнорируются. Например, где нормальная группировка вкладок в Лисе? Даже авторы Вивальди на движке Хрома умудрились сделать эту фичу, а там вроде как возможностей по кастомизации изначально меньше.&lt;/p&gt;</content><author><name></name></author><summary type="html">Увидел очередную статью на тему “Всегда лучше все менять”. Есть такой особый тип людей, которые считают, что любые изменения, обновления и прочие редизайны являются благом сами по себе. Таких людей довольно много в IT и около него, иначе как объяснить постоянные новые фичи, еженедельный цикл обновлений, отваливание “устаревших” технологий и восторги по любому поводу? Для таких людей вопрос “А зачем здесь что-то менять?” сам по себе является ересью. Многие из них готовы признать, что не все изменения к лучшему, но, мол, даже они несут пользу, опыт ошибок и вот это всё. Евангелисты постоянных реноваций упускают из виду только одну деталь — пользователей. Как насчет пользователей, вашей аудитории, тех людей, которые как бы используют ваш продукт, или даже его покупают (а то и простигосподи на него подписаны)? Как насчет их мнения, их удобства и их нужд?</summary></entry></feed>