<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-01-08T16:36:25+03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Борьба с дизайном</title><subtitle>Конструктивная критика дизайн-решений.</subtitle><entry><title type="html">Как изменить цвета подсветки синтаксиса в VS Code</title><link href="http://localhost:4000/2018/08/26/vs-code-syntax-highlight.html" rel="alternate" type="text/html" title="Как изменить цвета подсветки синтаксиса в VS Code" /><published>2018-08-26T00:00:00+03:00</published><updated>2018-08-26T00:00:00+03:00</updated><id>http://localhost:4000/2018/08/26/vs-code-syntax-highlight</id><content type="html" xml:base="http://localhost:4000/2018/08/26/vs-code-syntax-highlight.html">&lt;p&gt;Решить, вроде бы, банальный для редактора кода вопрос из заголовка, в VS Code оказалось непросто. В Sublime Text для этого достаточно распаковать файл темы, найти нужное значение и поменять цвет. Но мне нужен был официально бесплатный для коммерческого использования редактор и из тех, что я пробовал, VS Code показался самым нормальным (еще потыкал Brackets и Atom). Но, как это обычно бывает, чем дольше чем-то пользуешься, тем больше косяков находишь. Особенно у Майкрософт, да. Тут они решили не искать простых путей (по крайней мере, для пользователя). Хотите поменять один цвет? Вам придется либо создавать тему с нуля, либо собирать по крупицам рецепт ниже. Может этот пост сэкономит кому-то время и нервы.&lt;/p&gt;

&lt;p&gt;Будем менять цвета подсветки на примере темы Solarized Dark и CSS.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Открываем настройки.&lt;/li&gt;
  &lt;li&gt;В пользовательские настройки добавляем следующую конструкцию:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;“editor.tokenColorCustomizations”: {
    “[Solarized Dark]”: {
        “textMateRules”: [
            {
                “scope”: “entity.other.attribute-name.class.css”,
                “settings”: {
                “foreground”: “#e9a449”
                }
            },
        ],
    },
},
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;как-изменить-другую-тему-другие-параметры-и-другие-языки&quot;&gt;Как изменить другую тему, другие параметры и другие языки&lt;/h2&gt;

&lt;p&gt;Название темы в квадратных скобках просто заменяете на вашу. Вам нужно узнать значение scope для того элемента, который вы хотите изменить. Для этого откройте файл с кодом. Вызовите командную строку (Ctrl+Shift+P). Наберите Developer: Inspect TM Scopes и нажмите Enter. При клике на элемент, появится всплывающее окно:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Images/BrK-p8PMBERKd8NTmD04oA.png&quot; alt=&quot;скриншот-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Оно сразу предлагает строку с называнием параметра (тот самый scope) и текущим цветом — entity.other.attribute-name { “foreground”: “#93A1A1” }. Но, это не то, что нам нужно! По-крайней мере в данном случае, этот параметр изменит цвет всех селекторов (и классов, и id). Но я хочу задать для каждого свой цвет. Поэтому нам нужен первый параметр из списка ниже. То есть entity.other.attribute-name.class.css. У идентификатора будет похожая картина, только scope будет entity.other.attribute-name.id.css.&lt;/p&gt;

&lt;p&gt;А вот после применения настроек scope также поменяется на нужный:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Images/Gl2CS_N3358j5fO73nX9A.png&quot; alt=&quot;скриншот-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Я оставил в коде запятые на случай, если вы захотите добавить других цветов и другие параметры на уровни выше.&lt;/p&gt;</content><author><name></name></author><summary type="html">Решить, вроде бы, банальный для редактора кода вопрос из заголовка, в VS Code оказалось непросто. В Sublime Text для этого достаточно распаковать файл темы, найти нужное значение и поменять цвет. Но мне нужен был официально бесплатный для коммерческого использования редактор и из тех, что я пробовал, VS Code показался самым нормальным (еще потыкал Brackets и Atom). Но, как это обычно бывает, чем дольше чем-то пользуешься, тем больше косяков находишь. Особенно у Майкрософт, да. Тут они решили не искать простых путей (по крайней мере, для пользователя). Хотите поменять один цвет? Вам придется либо создавать тему с нуля, либо собирать по крупицам рецепт ниже. Может этот пост сэкономит кому-то время и нервы.</summary></entry><entry><title type="html">Фотошоп-трюки: хроматическая аберрация и маска границ</title><link href="http://localhost:4000/2018/06/01/chrom-abber-ph-mask.html" rel="alternate" type="text/html" title="Фотошоп-трюки: хроматическая аберрация и маска границ" /><published>2018-06-01T00:00:00+03:00</published><updated>2018-06-01T00:00:00+03:00</updated><id>http://localhost:4000/2018/06/01/chrom-abber-ph-mask</id><content type="html" xml:base="http://localhost:4000/2018/06/01/chrom-abber-ph-mask.html">&lt;p&gt;&lt;img src=&quot;/Images/ZUtvQ4jAZtX8dGB1gbtBWQ.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Сегодня расскажу вам, как бороться с хроматической аберрацией в фотошопе. На самом деле, саму аберрацию побороть довольно просто, а вот последствия этой борьбы уже нет.&lt;/p&gt;

&lt;p&gt;Каждый второй урок в выдаче по запросу “фотошоп хроматическая аберрация” расскажет вам вполне действенный метод. ХА — это цветные ореолы вокруг объектов на фото. Они всегда появляются на контрастных границах (граница светлого и темного) и довольно узкие. Значит, их можно убрать, наложив размытую копию слоя в режиме “Color”. Слой нужно размыть до состояния, когда цвет ХА пропадает, например, с помощью Filter&amp;gt;Blur&amp;gt;Gaussian blur. Количество пикселей зависит от размера фото, начинайте с 0 и поднимайте. Накладываем его в режиме “Цвет”, получаем перенос нового цвета на место ореолов, и они исчезают (как я понимаю, ХА — это только цветовой контраст, а не яркостный).&lt;/p&gt;

&lt;p&gt;Проблема в том, что этот метод негативно влияет на насыщенность всего фото. Это может быть незаметно на изображении близком к ч/б, но на насыщенном фото цвета потускнеют. И вот тут все как один уроки советуют “просто” взять и замазать ненужное по маске.&lt;/p&gt;

&lt;p&gt;Это может быть выходом, если ХА у вас на небольшом участке или фото всего одно. Но, что если оно по всей фотографии или таких фото много? В любом случае вырисовывать маску не наш метод! Тут-то нам пригодится метод создания маски границ. Суть такова: так как ореолы всегда появляются на границах, то нам нужно создать маску, на которой границы были бы белыми, а все остальное (участки, на которых нужно сохранить цвет)— черным.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Images/r5Y8NxJqMXmpg6IlQDEhVA.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Есть несколько способов создать такое изображение в фотошопе.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Фильтр Filter&amp;gt;Stylize&amp;gt;Find Edges&lt;/li&gt;
  &lt;li&gt;Фильтр Glowing Edges внутри Filter&amp;gt;Filter Gallery&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/Images/4LJexPR-RsPJtTdsZE-Skw.jpeg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/Images/O_WZxYAoHUTfU2N9egz7hg.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;У второго варианта больше настроек, так есть смысл использовать его. Внутри Галереи фильтров вы можете переключаться на оригинал, нажимая на глазик в списке фильтров. Подберите такие значения, чтобы белые линии совпали с ХА ореолами.&lt;/p&gt;

&lt;p&gt;Вряд ли ваша маска будет идеальной, ведь фотошоп может найти кучу границ, на которых нет ХА. Можно убрать мелкие детали с помощью кривых/уровней (Ctrl+M, Ctrl+L). Для этого нужно поднять контраст (чтобы темное стало темнее, светлое светлее). А вот оставшиеся недочеты можно уже исправить кистью. Учтите, что изменять саму маску можно только деструктивно (или делать все коррекции на слое до копирования его в маску).&lt;/p&gt;

&lt;p&gt;Чтобы использовать слой как маску выделите весь холст (Ctrl+A), скопируйте изображение (Ctrl+C), войдите в редактирование маски (Alt+клик на маску) и вставьте туда изображение (Ctrl+V). Готово!&lt;/p&gt;

&lt;p&gt;PS: Перед применением фильтра можно сделать из слоя смарт объект (ПКМ&amp;gt;Convert to smart object), чтобы можно было изменить настройки фильтра. Ну и сделать экшен, чтобы не повторять все каждый раз. При создании экшена не забудьте включить выбор настроек фильтров (квадратики напротив действия).&lt;/p&gt;

&lt;p&gt;Начинаем с копирования слоя и размытия:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Images/Sk9NAzMeGPxP9S07MODq9g.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Выбираем нужный режим наложения:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Images/3neR6U1dP_wX1rt-5vjbiw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Настройка фильтра:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Images/EKhNPHqUtKBJxH9ELrQUrQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Слои будут выглядеть примерно так. Слой из которого делается маска сверху невидимый.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Images/L8owNThvmuIQXWgiFFRSeg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Экшен&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Images/YJw23ctpaaC38JiDAeEj3w.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Результат&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Images/chromfin.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">CSS-трюки: Несколько изображений внутри букв без фотошопа</title><link href="http://localhost:4000/2018/05/09/css-tricks-images-in-letters.html" rel="alternate" type="text/html" title="CSS-трюки: Несколько изображений внутри букв без фотошопа" /><published>2018-05-09T00:00:00+03:00</published><updated>2018-05-09T00:00:00+03:00</updated><id>http://localhost:4000/2018/05/09/css-tricks-images-in-letters</id><content type="html" xml:base="http://localhost:4000/2018/05/09/css-tricks-images-in-letters.html">&lt;p&gt;&lt;img src=&quot;/Images/w_QTE8rloTnmwE7OT0bbuw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Привет, сегодня будет первый пост про HTML/CSS верстку, веб-дизайн и вот это всё.&lt;/p&gt;

&lt;p&gt;Я тут пытался сделать аналог Clipping Mask из фотошопа только в живой верстке. То есть чтобы буквы заполнились изображением, а за их границами оно исчезло. Это не так сложно сделать с помощью “экспериментального” значения свойства background-clip: text; (поддерживается в современных браузерах, почти везде с префиксом -webkit , в лисе просто так). Но просто это только, если использовать одно изображение. А что, если вы хотите несколько? Конечно, можно составить background-image из нескольких картинок, но в этом случае вы лишаетесь определенной гибкости. Например, выравнивания каждого фото с помощью background-position. Если же составлять фон из div’ов, то тогда вы лишаетесь возможности обтравить его текстом… или нет?&lt;/p&gt;

&lt;p&gt;Кому не терпится, можно сразу посмотреть результат на &lt;a href=&quot;https://jsfiddle.net/Vallek/eobLc7zf/&quot;&gt;Jsfiddle&lt;/a&gt;.
&lt;script async=&quot;&quot; src=&quot;//jsfiddle.net/Vallek/eobLc7zf/embed/html,css,result/&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Мне удалось добиться желаемого эффекта вроде бы без особых хаков (не считая того самого background-clip: text;). Суть такова. В каждый div с фоном вкладывается надпись (в примере через span). Блокам присваиваем background-clip: text; , сам текст должен быть прозрачный. Ширину блоков задаем в процентах в зависимости от их количества, чтобы в сумме вышло 100%. Если их 4, то по 25%. Теперь самое главное: каждую надпись, начиная со второй, мы сдвигаем влево с помощью отрицательной margin-left в процентах. Второму блоку задаем значение -100%, третьему -200% и так далее. Суть в том, что отступы в процентах высчитываются от размера родительского блока, а не самого элемента. Таким образом 0.25 умножаются на 1 и получается та же ширина блока. Соответственно каждый следующий блок надо сдвигать на расстояние в 2 раза больше. Размер шрифта можно подбирать на глаз в vw единицах, чтобы надпись влезла и при этом заняла необходимую ширину. В итоге все это не только собирается в единую, будто бы бесшовную, надпись, но и автоматически масштабируется. Чтобы выровнять картинки по горизонтальному центру задайте background-position: 50%;. Не забудьте задать блокам overflow: hidden;.&lt;/p&gt;

&lt;p&gt;В чем смысл:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Ну, во-первых это красиво:) Плюс я учусь чему-то новому.&lt;/li&gt;
  &lt;li&gt;Вы можете выравнивать каждое изображение независимо от других. В примере выше у первой картинки background-position не 50%, а 20%, чтобы был виден сюжетно важный объект. К другим параметрам вроде масштаба это, конечно, тоже относится.&lt;/li&gt;
  &lt;li&gt;Можно заменять картинки на лету без фотошопа.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;С какими проблемами я столкнулся:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;В лисе могут возникнуть проблемы с выделением текста (в хроме вроде нет). Так как использовать этот прием есть смысл только в декоративных целях можно выключить выделение через user-select: none; (работает только с префиксами). Для доступности можно присвоить контейнеру роль role=”presentation”.&lt;/li&gt;
  &lt;li&gt;Чтобы избавиться от ненужного переноса слов используйте white-space: nowrap;.&lt;/li&gt;
  &lt;li&gt;Использовать тут простой одноцветный фон я особо смысла не вижу, но с background-color никаких проблем быть не должно. А вот с градиентами они есть. Точнее они появляются, если использовать на id универсальное свойство background, которое начинает конфликтовать с классом. Поэтому нужно задавать для id полный список значений общего блока. Это будет выглядеть как-то так: background: 50% no-repeat linear-gradient(to right, red , yellow) text;.&lt;/li&gt;
  &lt;li&gt;Ну и для браузеров без поддержки значения text, можно убрать прозрачность с надписи (не забудьте выбрать подходящий цвет).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;PS Я не утверждаю, что я первый, кто до такого додумался. Но в ходе гугления решения, ничего не нашел.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Признак плохого дизайна</title><link href="http://localhost:4000/2018/03/28/priznak-plohogo-disigna.html" rel="alternate" type="text/html" title="Признак плохого дизайна" /><published>2018-03-28T00:00:00+03:00</published><updated>2018-03-28T00:00:00+03:00</updated><id>http://localhost:4000/2018/03/28/priznak-plohogo-disigna</id><content type="html" xml:base="http://localhost:4000/2018/03/28/priznak-plohogo-disigna.html">&lt;p&gt;Как понять, что какой-то дизайн плох? Есть очень эффективное проверочное средство. Если после выпуска продукта пользователи или сами авторы начинают собирать костыли для борьбы с этим самым дизайном — это плохой дизайн. Ну, или, по крайней мере, у него есть серьезные проблемы.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Images/ZKX-3muTUe9qdQ6MfzdjJg.jpeg&quot; alt=&quot;планшет с клавиатурой&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Пример: клавиатура с подставкой для планшета, которая превращает его в ноутбук. То есть сначала у ноутбука убрали клаву и сделали тачскрин. А потом вернули клаву. Почему? Потому что пользоваться экранной неудобно. Потому что тачскрин хорош только для ряда операций (непосредственное и простое взаимодействие с контентом типа перетащить/пролистать) и совершенно непригоден для других (собственно печать текста и любой профессиональный софт). Но многие почему-то оказались не готовы покупать каждого устройства по штуке, поэтому костыли костылики. Но это довольно сложный пример, я даже не знаю, есть ли тут какое-то решение.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Images/GzeOuuvmG3lBXg1H-NrMew.jpeg&quot; alt=&quot;планшет с клавиатурой&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Другой пример: переходники для продукции компании Apple, которые появились потому что гении из Купертино решили придумать еще один стандарт (я не очень люблю тот комикс, его часто используют не в тему, но тут как раз про это). Ну или просто продать переходничков за 50 баксов.&lt;/p&gt;

&lt;p&gt;Моя любимая тема: расширения, скрипты и пользовательские стили, исправляющие недочеты браузеров и сайтов. А также очередное обновление, после которого всё вышеперечисленное отваливается.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Images/HHmryR-JBsjZ7afqGCf-RA.png&quot; alt=&quot;планшет с клавиатурой&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ну и свежий пример: выступ корпуса на экран смартфонов от тех же дизайнеров. Вот решила какая-то (пусть и держащая пол рынка) компания изменить форму экрана и теперь, видимо, все должны плясать под ее дудку. Даже стандарты CSS обновили. Вдумайтесь! Стандарты верстки сайтов и приложений изменили, потому что одна компания производитель смартфонов решила сделать какой-то выступ на экране. А если завтра они решат, что экран должен быть треугольным, или круглым (в спецификациях как раз такой пример лол)? И разумеется яблочные апологеты сразу ринулись объяснять неразумным пользователям, какое это гениальное решение. Правда уже появился метод-костыль, когда выступ просто скрывается уменьшением высоты экрана и черными полосками. Короче Г Е Н И И.&lt;/p&gt;

&lt;p&gt;Тут надо сказать, что “плохой” дизайн: а) не обязательно плох для всех. Особенно учитывая, что большей части пользователей просто похуй. Они готовы привыкать ко всему (аргумент привыкания, кстати, еще один показатель плохого дизайна). И б) плохой дизайн вовсе не означает коммерческий неуспех. Порой кажется, что даже наоборот.&lt;/p&gt;

&lt;p&gt;У этого признака плохого дизайна есть только одна проблема. Он проявляется только после выпуска продукта. С другой стороны большая часть этих проблем настолько очевидна, что порой просто не понимаешь, о чем же думают дизайнеры всего этого чуда. Такие дела.&lt;/p&gt;</content><author><name></name></author><summary type="html">Как понять, что какой-то дизайн плох? Есть очень эффективное проверочное средство. Если после выпуска продукта пользователи или сами авторы начинают собирать костыли для борьбы с этим самым дизайном — это плохой дизайн. Ну, или, по крайней мере, у него есть серьезные проблемы.</summary></entry><entry><title type="html">Изменения или жизнь</title><link href="http://localhost:4000/2017/09/27/izmenenia-ili-zhisn.html" rel="alternate" type="text/html" title="Изменения или жизнь" /><published>2017-09-27T00:00:00+03:00</published><updated>2017-09-27T00:00:00+03:00</updated><id>http://localhost:4000/2017/09/27/izmenenia-ili-zhisn</id><content type="html" xml:base="http://localhost:4000/2017/09/27/izmenenia-ili-zhisn.html">&lt;p&gt;Увидел очередную статью на тему &lt;a href=&quot;https://blog.asmartbear.com/change.html&quot;&gt;“Всегда лучше все менять”&lt;/a&gt;. Есть такой особый тип людей, которые считают, что любые изменения, обновления и прочие редизайны являются благом сами по себе. Таких людей довольно много в IT и около него, иначе как объяснить постоянные новые фичи, еженедельный цикл обновлений, отваливание “устаревших” технологий и восторги по любому поводу? Для таких людей вопрос “А зачем здесь что-то менять?” сам по себе является ересью. Многие из них готовы признать, что не все изменения к лучшему, но, мол, даже они несут пользу, опыт ошибок и вот это всё. Евангелисты постоянных реноваций упускают из виду только одну деталь — пользователей. Как насчет пользователей, вашей аудитории, тех людей, которые как бы используют ваш продукт, или даже его покупают (а то и простигосподи на него подписаны)? Как насчет их мнения, их удобства и их нужд?&lt;/p&gt;

&lt;p&gt;В статье по ссылке, как это обычно бывает, происходит мастерское жонглирование понятиями. Тут вам и “Вы должны измениться сами” и “Все недовольны тем, как сейчас, но не хотят изменений”. Первый аргумент может и применим к каким-то общественным сферам, но как я сука должен измениться, чтобы у меня снова заработали старые расширения на Firefox? Ну а про недовольство тем, как сейчас — классический ход с введением ложного утверждения и доказательством своей правоты от него. Кому не нравится? Почему? Эти вопросы (не говоря уже про ответы), да и вообще конкретику в таких статьях найти сложно.&lt;/p&gt;

&lt;p&gt;Другой популярный аргумент — просто нужно привыкнуть. Тут опять же происходит подмена понятий. Ведь привыкнуть можно почти к чему угодно (традиционный уже анекдот про еблю в жопу раз в неделю). Относительно легко привыкают к новому пользователи софта и всяких онлайн сервисов. Мы действительно уже привыкли привыкать. Удобный порядок постов в социальной сети превращен в кашу с помощью волшебного алгоритма, который знает как лучше? Привыкнем. Половина расширений браузера, без которых любое действие замедляется и становится неудобным, отвалилась после обновлений? Привыкнем. Способность человека привыкать — не аргумент в споре, так как она не имеет никакого отношения к конкретным продуктам и фичам, о которых идет речь.&lt;/p&gt;

&lt;p&gt;Выбор “Изменять или не изменять” — это ложный выбор. Обычно есть три варианта: сделать лучше, сделать хуже и ничего не изменять. При этом иногда можно сделать хуже, ничего не поменяв. Но тут опять же не стоит подменять понятия. Если вы понимаете, что бездействием что-то испортите, то это уже совсем другая история. Но давайте перейдем к конкретике.&lt;/p&gt;

&lt;p&gt;Вот моя любимая тема — браузеры. Браузер — сложная штука и поменять в ней можно много чего. Вряд ли кто-то будет возражать, что любой браузер должен поддерживать все последние стандарты. Нет причин не внедрять то, что отвечает за возможность отображать сайты. Хотя даже тут можно спросить, так ли нам нужна поддержка VR, AR и других букв, но разработкой стандартов занимаются не авторы браузеров (по-крайней мере одних из двух). Поэтому тут им остается только обновлять. То же самое относится к исправлению багов и проблем производительности.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Images/NfCUmJ4E9uAm5kWhvKLrBA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Устаревшие расширения в устаревшем сайдбаре. И это еще новый профиль, раньше было больше. Но самое смешное на этом cкриншоте — новая фича от Мозиллы — Контейнеры, сделанная в виде старого расширения (но почему-то без плашки Legacy).&lt;/p&gt;

&lt;p&gt;Совсем другая история с расширениями. Firefox скоро полностью откажется от старых расширений, а с ними и от возможности изменять (ирония!) интерфейс и функциональность браузера. Новые web расширения — замечательная технология. Она позволит создавать одно расширение сразу на все платформы и с безопасностью у них вроде лучше. Вот только они не могут полностью заменить старую технологию. А даже если бы и могли, почти никто не будет переписывать свои расширения с нуля. Значит, это новшество пойдет во вред многим пользователям и прежде всего тем, кто выбирал Firefox осознанно за расширяемость. А ведь все, что требовалось — просто оставить старые расширения в покое. Можно было пойти и на более радикальные меры (но менее радикальные, чем полный отказ). Например, выключить их по умолчанию, вынести в какой-то модуль и так далее. Но нет, дорогу новшествам. Кому нужны ваши сайдбары, удобные вкладки и настраиваемый интерфейс.&lt;/p&gt;

&lt;p&gt;Возможно, у вас сложилось впечатление, что я против любых изменений. Разумеется это не так. Я всего лишь против крайностей. Дизайн — это способ выполнения задачи. И прежде чем что-то менять стоит спросить себя, насколько эффективно выполняется задача и как можно ее улучшить. Иногда ответ — “никак”. А иногда действительно необходимые изменения игнорируются. Например, где нормальная группировка вкладок в Лисе? Даже авторы Вивальди на движке Хрома умудрились сделать эту фичу, а там вроде как возможностей по кастомизации изначально меньше.&lt;/p&gt;</content><author><name></name></author><summary type="html">Увидел очередную статью на тему “Всегда лучше все менять”. Есть такой особый тип людей, которые считают, что любые изменения, обновления и прочие редизайны являются благом сами по себе. Таких людей довольно много в IT и около него, иначе как объяснить постоянные новые фичи, еженедельный цикл обновлений, отваливание “устаревших” технологий и восторги по любому поводу? Для таких людей вопрос “А зачем здесь что-то менять?” сам по себе является ересью. Многие из них готовы признать, что не все изменения к лучшему, но, мол, даже они несут пользу, опыт ошибок и вот это всё. Евангелисты постоянных реноваций упускают из виду только одну деталь — пользователей. Как насчет пользователей, вашей аудитории, тех людей, которые как бы используют ваш продукт, или даже его покупают (а то и простигосподи на него подписаны)? Как насчет их мнения, их удобства и их нужд?</summary></entry></feed>